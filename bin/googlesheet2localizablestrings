#!/usr/bin/php
<?php
echo `ruby -v`;

echo "php_sapi_name: " . php_sapi_name() . "\n";

if (!in_array(php_sapi_name(), ['cli', 'phpdbg'])) {
    throw new Exception("This application must be run on the command line./n");
}

// Check input
if (count($argv) != 4) {
    die("Usage: googlesheet2localizablestrings format /path/to/source/root googledrivefileid
format: android | json | php | ios | swift
    ");
}
define('OUTPUT_TYPE', rtrim($argv[1], '/'));
define('SOURCE_ROOT', rtrim($argv[2], '/'));
define('FILE_ID', $argv[3]);

$credentials = $_SERVER['HOME'] . '/.libjsambells/googlesheet2localizablestrings.credentials.json';
if (!file_exists($credentials)) {
    die("Missing: $credentials, see https://github.com/iamamused/libjsambells\n");
}
putenv("GOOGLE_APPLICATION_CREDENTIALS=" . $credentials);


// Setup libraries

if (file_exists(dirname(__FILE__).'/../share/jsambells-php/lib')) {
    define('LIBRARY_INCLUDE_PATH', realpath(dirname(__FILE__).'/../share/jsambells-php/lib'));
} else if (file_exists('/usr/local/share/jsambells-php/lib')) {
    define('LIBRARY_INCLUDE_PATH', '/usr/local/share/jsambells-php/lib');
} else {
    die('missing /usr/local/share/jsambells-php/lib');
}

require_once LIBRARY_INCLUDE_PATH . '/vendor/autoload.php';
require_once LIBRARY_INCLUDE_PATH . '/headers/common.php';


// Start business logic

$client = new Google_Client();

// Authenticate as a service.
// Had to share the file and/or folder with the email 
// listed in the service account credentials
$credentials = $client->loadServiceAccountJson(
    $credentials,
    [
        'https://www.googleapis.com/auth/drive',
        'https://spreadsheets.google.com/feeds'
    ]
);

$client->setAssertionCredentials($credentials);

// update token
if ($client->getAuth()->isAccessTokenExpired()) {
    $client->getAuth()->refreshTokenWithAssertion();
}

$client->setApplicationName("SpeakFeel Jeff's Automation Package");

// UI Copy Deck Template: com.example.app:target
//$fileId = '1JsmrxoCqJILJ5vEe3x4hHB1znaHasYFzcKdOYfLJZoA';

$service = new Google_Service_Drive($client);

try {
    $file = $service->files->get(FILE_ID);

    $csvString = downloadCSV($service, $file);

    if (!$csvString) {
        die('Could not download CSV');
    }

    /*
    switch (OUTPUT_TYPE) {
        case 'android':
            $csvString = str_replace('&','&amp;',$csvString);
            $csvString = str_replace('\'','\\\'',$csvString);
            $csvString = str_replace('\'','\\\'',$csvString);
        break;
        case 'ios':
        break;
        default:
            break;
    }
    */


    $prefixes = [false];
    $processedPrefixes = [];
    while (list($k, $prefix) = each($prefixes)) {

        if ($prefix && in_array($prefix, $processedPrefixes)) {
            continue;
        }

        echo "Processing Prefix: '$prefix'\n";
        $processedPrefixes[] = $prefix;

        $csv = new parseCSV();
        $csv->auto($csvString);

        list($csv, $allKeys, $useBase, $hasBase, $validLanguages, $validLanguageColumns, $firstLanguage, $keyColumn, $formatsColumn, $commentsColumn) = reformatCSV($csv, $prefix, $prefixes);

        foreach ($validLanguages as $lang) {

            $filePath = '/tmp/googlesheet2localozablestrings' . $prefix . '.working';
            $file = fopen($filePath, "w");
            fputcsv($file, $csv->titles);
            foreach ($csv->data as $row) {
                if ($row) {
                    fputcsv($file, $row);
                }
            }
            fclose($file);

            $sourceRoot = SOURCE_ROOT;

            $type = '';
            $output_basename = '';
            switch (OUTPUT_TYPE) {
                case 'android':
                    $type = 'csv2android';
                    break;
                case 'php':
                    $type = 'csv2php';
                    break;
                case 'json':
                    $type = 'csv2json';
                    break;
                case 'ios':
                case 'swift':
                default:
                    $type = 'csv2strings';
                    if ($prefix) {
                        $output_basename = ' --output_basenames=' . $prefix . '';
                    }
                    break;
            }


            putenv("LANG=en_US.UTF-8");
            putenv("LANGUAGE=en_US.UTF-8");
            putenv("LC_ALL=en_US.UTF-8");

            $command = " babelish $type --keys-column=\"$keyColumn\" --comments-column=\"$commentsColumn\" --filename=\"$filePath\" --langs=\"$lang\" --output-dir=\"$sourceRoot\"$output_basename";
            echo "Command: $ $command\n";
            echo `$command`;
        }


        switch (OUTPUT_TYPE) {
            case 'android':
                // move the first language into "values" without the suffix.
                @mkdir($sourceRoot . '/values');
                rename($sourceRoot . '/values-' . $firstLanguage . '/strings.xml', $sourceRoot . '/values/strings.xml');
                break;
            case 'ios':
                $allKeys = array_unique($allKeys);
                asort($allKeys);
                $hFile =
                    '/* Localization constants generated by googlesheet2localizablestrings.
 * 
 * usage: GSLocalizedString(kLocStringConstant);
 * 
 * Generated From ' . FILE_ID . '
 * 
 * @see https://github.com/iamamused/libjsambells/blob/master/bin/googlesheet2localizablestrings
 */

@import Foundation;

#define GSLocalizedString(key) \
        NSLocalizedString((key),nil)
    
';
                $mFile =
                    '/* Localization constants generated by googlesheet2localizablestrings.
 * 
 * usage: GSLocalizedString(kLocStringConstant);
 * 
 * Generated From ' . FILE_ID . '
 * 
 * @see https://github.com/iamamused/libjsambells/blob/master/bin/googlesheet2localizablestrings
 */

#import "GSLocalizationConstants.h"

';
//var_dump($allKeys);
//die();
                // generate constants
                foreach ($allKeys as $key) {
                    if (!$key) continue;
                    if (stristr($key,':') !== false) continue;
                    
                    $key = preg_replace('/[^A-Za-z0-9_-]/', '', $key);
                    // .h FOUNDATION_EXPORT NSString *const kUserProfileCategories;
                    // .m NSString *const kUserProfileCategories = @"kUserProfileCategories";

                    $camel = ucfirst(Google_Utils::camelCase($key));
                    $hFile .= "FOUNDATION_EXPORT NSString *const kLoc{$camel};\n";
                    $mFile .= "NSString *const kLoc{$camel} = @\"$key\";\n";
                }
                
                $mFile .= "\n\n//Qucik find/replace helpers: \n// ";

                foreach ($allKeys as $key) {
                    if (!$key) continue;
                    if (stristr($key,':') !== false) continue;
                    
                    $camel = preg_replace('/[^A-Za-z0-9_-]/', '', $key);
                    $camel = ucfirst(Google_Utils::camelCase($camel));
                    // http://unix.stackexchange.com/questions/112023/how-can-i-replace-a-string-in-a-files
                    
                    $mFile .= "find . -type f -iname \"*.m\" ! -iname \"*GSLocalizationConstants*\" -exec sed -i '' 's/@\"$key\"/kLoc$camel/g' {} +;";

                    //$mFile .= "//find . -regex \".*\.\(m\)\" | perl -pi -w -e 's/@\"$key\"/kLoc$camel/g;' *.m;";
                
                }
                
                file_put_contents($sourceRoot . '/GSLocalizationConstants'.ucfirst($prefix).'.h', $hFile);
                file_put_contents($sourceRoot . '/GSLocalizationConstants'.ucfirst($prefix).'.m', $mFile);
                break;
            case 'swift':
                $allKeys = array_unique($allKeys);
                asort($allKeys);
                $swiftFile =
                    '/* Localization constants generated by googlesheet2localizablestrings.
 * 
 * usage: LocalizedString(_ key: LocalizedStringConstants)
 * 
 * Generated From ' . FILE_ID . '
 * 
 * @see https://github.com/iamamused/libjsambells/blob/master/bin/googlesheet2localizablestrings
 */
 
import Foundation';

                $swiftFile .= "\n\n/**";
                $swiftFile .= "\n * This method is a convenience wrapper around NSLocalizedString method using the";
                $swiftFile .= "\n * LocalizedStringConstants which is generated off the Localizable.strings file keys";
                $swiftFile .= "\n *";
                $swiftFile .= "\n * @param key -> The LocalizedStringConstants value to look for";
                $swiftFile .= "\n */";
                $swiftFile .= "\nfunc LocalizedString(_ key: LocalizedStringConstants) -> String {";
                $swiftFile .= "\n\treturn NSLocalizedString(key.rawValue, comment: \"\")";
                $swiftFile .= "\n}";

                $swiftFile .= "\n\n/**";
                $swiftFile .= "\n * Enum of the available keys in the Localizable.strings file";
                $swiftFile .= "\n */";
                $swiftFile .= "\nenum LocalizedStringConstants: String {\n";
                
                // generate constants
                foreach ($allKeys as $key) {
                    if (!$key) continue;
                    if (stristr($key,':') !== false) continue;
                    
                    $key = preg_replace('/[^A-Za-z0-9_-]/', '', $key);
                    // .h FOUNDATION_EXPORT NSString *const kUserProfileCategories;
                    // .m NSString *const kUserProfileCategories = @"kUserProfileCategories";

                    $camel = lcfirst(Google_Utils::camelCase($key));
                    $swiftFile .= "\tcase {$camel} = \"$key\"\n";
                }

                $swiftFile .= '}';
                file_put_contents($sourceRoot . '/LocalizationConstants'.ucfirst($prefix).'.swift', $swiftFile);
                break;
            default:
                break;
        }

    }
    if (`which osascript`) {
        $outputType = OUTPUT_TYPE;
        `osascript -e 'display notification "Created $outputType Localized Strings for $sourceRoot"'`;
    }


} catch (Exception $e) {
    echo "\nAn error occurred: ", $e->getMessage();
}

// Functions


function reformatCSV($csv, $prefix = false, &$prefixes = null)
{

    if (($prefixKey = array_search($prefix, $prefixes)) !== false) {
        unset($prefixes[$prefixKey]);
    }

    // remove the instructions line.
    array_shift($csv->data);

    // assumption columns matching language codes as headers are valid.
    $validLocaleCodes = array_keys(validLocales());
    $useBase = file_exists(SOURCE_ROOT . '/Base.lproj');
    $hasBase = false;
    $validLanguages = [];
    $validLanguageColumns = [];
    $firstLanguage = false;
    $keyColumn = -1;
    $formatsColumn = -1;
    $commentsColumn = -1;

    for ($i = 0; $i < count($csv->titles); $i++) {
        $code = trim($csv->titles[$i]);
        if (in_array($code, $validLocaleCodes)) {
            $in = $code;
            $out = $code;
            if ($useBase && !$hasBase) {
                if (OUTPUT_TYPE == 'ios' || OUTPUT_TYPE == 'swift') {
                    // Still perform the language creation as it is required for iOS to make sure that the languages swap properly
                    $validLanguages[] = "$in:$out";
                    $validLanguageColumns[] = $csv->titles[$i];
                }
                $hasBase = true;
                $out = 'Base';
            }
            if (!$firstLanguage) {
                $firstLanguage = $out;
            }
            $validLanguages[] = "$in:$out";
            $validLanguageColumns[] = $csv->titles[$i];
        } else {
            switch (strtolower($code)) {
                case 'key':
                    $keyColumn = $i;
                    break;
                case 'formats':
                    $formatsColumn = $i;
                    break;
                case 'description':
                    $commentsColumn = $i;
                    break;
            }
        }
    }

    // apply formatting and gather keys
    for ($i = 0; $i < count($csv->data); $i++) {
        $row = array_change_key_case($csv->data[$i], CASE_LOWER);

        // grab the key and check if it's in another file.
        if (stristr($row['key'], ':') !== false) {
            switch (OUTPUT_TYPE) {
                default:
                    $rowKey = substr($row['key'], strpos($row['key'], ':') + 1);
                    $rowKeyPrefix = substr($row['key'],  0, strpos($row['key'], ':')); 
                    if ($rowKeyPrefix && 0 !== stripos($rowKey, $rowKeyPrefix)) {
                        $rowKey = strtolower($rowKeyPrefix).'_'.$rowKey;
                    }
                    $row['key'] = $rowKey;
                    break;
                case 'ios':
                    list($rowPrefix, $rowKey) = explode(':', $row['key']);
                    if ($rowPrefix != $prefix) {
                        $csv->data[$i] = null;
                        if (!in_array($rowPrefix, $prefixes)) {
                            $prefixes[] = $rowPrefix;
                        }
                        continue;
                    } else {
                        $row['key'] = $rowKey;
                    }
                    break;
            }


        } else if ($prefix) {
            $csv->data[$i] = null;
            continue;
        }

        switch (@$row['parser']) {
            case 'plain':

                break;
            case 'html':

                break;
            case 'markdown':

                break;
            default:
                break;
        }

        // Escape content only
        foreach ($validLanguageColumns as $langCol) {
            switch (OUTPUT_TYPE) {
                case 'android':
                    $row[$langCol] = str_replace('%', '\\u0025', $row[$langCol]);
                    $row[$langCol] = str_replace('&', '&amp;', $row[$langCol]);
                    $row[$langCol] = str_replace('\"', '\\\'', $row[$langCol]);
                    $row[$langCol] = str_replace('\'', '\\\'', $row[$langCol]);
                    if (@$row['parser'] == 'html' || (@!$row['parser'] && ($row[$langCol] && trim($row[$langCol][0]) == '<'))) {
                        $row[$langCol] = '<![CDATA[' . $row[$langCol] . ']]>';
                    }
                    break;
                case 'ios':
                    $row[$langCol] = str_replace('%@', '%%@', $row[$langCol]);
                    break;
                default:
                    break;
            }
            $row[$langCol] = trim($row[$langCol]);
            //echo "{$row[$langCol]}\n";
        }
        $csv->data[$i] = $row;


        $formats = trim(@$row['formats']);
        if (!$formats) continue;

        $formatPairs = explode(';', $formats);
        foreach ($formatPairs as $pair) {
            if (!$pair) {
                continue;
            }
            list($find, $replace) = explode('=', $pair);
            $find = trim($find);
            $replace = explode('|', $replace);
            switch (OUTPUT_TYPE) {
                case 'android':
                    $replace = $replace[1];
                    break;
                case 'php':
                    $replace = $replace[3];
                    break;
                case 'json':
                    $replace = $replace[2];
                    break;
                default:
                case 'ios':
                case 'swift':
                    $replace = $replace[0];
                    break;
            }
            foreach ($validLanguageColumns as $langCol) {
                $row[$langCol] = str_replace($find, $replace, $row[$langCol]);
            }
        }
        $csv->data[$i] = $row;
    }

    $allKeys= array();
    foreach ($csv->data as $ik=>$item) {
        if (!$item['key']) {
            continue;
        }
        if (stristr($item['key'],':') !== false) {
            // Filter out the other prefixed keys.
            unset($csv->data[$ik]);
            continue;
        }
        
        // prefix all the keys with the prefix
        if ($prefix && 0 !== stripos($item['key'], $prefix)) {
            $csv->data[$ik]['key'] = strtolower($prefix).'_'.$csv->data[$ik]['key'];
        }
        
        $allKeys[] = $csv->data[$ik]['key'];
    }
        
    return [$csv, $allKeys, $useBase, $hasBase, $validLanguages, $validLanguageColumns, $firstLanguage, $keyColumn, $formatsColumn, $commentsColumn];

}


function downloadCSV($service, $file)
{
    $content = $service->files->export($file->id, 'text/csv', array('alt' => 'media'));
    return $content;
}

function validLocales()
{
    return array(
        'aa' => 'Afar',
        'af' => 'Afrikaans',
        'sq' => 'Albanian',
        'am' => 'Amharic',
        'ar' => 'Arabic',
        'an' => 'Aragonese',
        'hy' => 'Armenian',
        'as' => 'Assamese',
        'ast' => 'Asturian',
        'az' => 'Azerbaijani',
        'eu' => 'Basque',
        'be' => 'Belarusian',
        'bem' => 'Bemba',
        'bn' => 'Bengali',
        'ber' => 'Berber',
        'byn' => 'Blin',
        'bs' => 'Bosnian',
        'br' => 'Breton',
        'bg' => 'Bulgarian',
        'my' => 'Burmese',
        'ca' => 'Catalan',
        'zh' => 'Chinese',
        'cv' => 'Chuvash',
        'kw' => 'Cornish',
        'crh' => 'Crimean Turkish',
        'hr' => 'Croatian',
        'cs' => 'Czech',
        'da' => 'Danish',
        'dv' => 'Divehi',
        'nl' => 'Dutch',
        'dz' => 'Dzongkha',
        'en' => 'English',
        'eo' => 'Esperanto',
        'et' => 'Estonian',
        'fo' => 'Faroese',
        'fil' => 'Filipino',
        'fi' => 'Finnish',
        'fr' => 'French',
        'fur' => 'Friulian',
        'ff' => 'Fulah',
        'gl' => 'Galician',
        'lg' => 'Ganda',
        'gez' => 'Geez',
        'ka' => 'Georgian',
        'de' => 'German',
        'el' => 'Greek',
        'gu' => 'Gujarati',
        'ht' => 'Haitian',
        'ha' => 'Hausa',
        'iw' => 'Hebrew',
        'he' => 'Hebrew',
        'hi' => 'Hindi',
        'hu' => 'Hungarian',
        'is' => 'Icelandic',
        'ig' => 'Igbo',
        'id' => 'Indonesian',
        'ia' => 'Interlingua',
        'iu' => 'Inuktitut',
        'ik' => 'Inupiaq',
        'ga' => 'Irish',
        'it' => 'Italian',
        'ja' => 'Japanese',
        'kl' => 'Kalaallisut',
        'kn' => 'Kannada',
        'ks' => 'Kashmiri',
        'csb' => 'Kashubian',
        'kk' => 'Kazakh',
        'km' => 'Khmer',
        'rw' => 'Kinyarwanda',
        'ky' => 'Kirghiz',
        'kok' => 'Konkani',
        'ko' => 'Korean',
        'ku' => 'Kurdish',
        'lo' => 'Lao',
        'lv' => 'Latvian',
        'li' => 'Limburgish',
        'lt' => 'Lithuanian',
        'nds' => 'Low German',
        'mk' => 'Macedonian',
        'mai' => 'Maithili',
        'mg' => 'Malagasy',
        'ms' => 'Malay',
        'ml' => 'Malayalam',
        'mt' => 'Maltese',
        'gv' => 'Manx',
        'mi' => 'Maori',
        'mr' => 'Marathi',
        'mn' => 'Mongolian',
        'ne' => 'Nepali',
        'se' => 'Northern Sami',
        'nso' => 'Northern Sotho',
        'nb' => 'Norwegian Bokmål',
        'nn' => 'Norwegian Nynorsk',
        'oc' => 'Occitan',
        'or' => 'Oriya',
        'om' => 'Oromo',
        'os' => 'Ossetic',
        'pap' => 'Papiamento',
        'ps' => 'Pashto',
        'fa' => 'Persian',
        'pl' => 'Polish',
        'pt' => 'Portuguese',
        'pa' => 'Punjabi',
        'ro' => 'Romanian',
        'ru' => 'Russian',
        'sa' => 'Sanskrit',
        'sc' => 'Sardinian',
        'gd' => 'Scottish Gaelic',
        'sr' => 'Serbian',
        'sid' => 'Sidamo',
        'sd' => 'Sindhi',
        'si' => 'Sinhala',
        'sk' => 'Slovak',
        'sl' => 'Slovenian',
        'so' => 'Somali',
        'nr' => 'South Ndebele',
        'st' => 'Southern Sotho',
        'es' => 'Spanish',
        'sw' => 'Swahili',
        'ss' => 'Swati',
        'sv' => 'Swedish',
        'tl' => 'Tagalog',
        'tg' => 'Tajik',
        'ta' => 'Tamil',
        'tt' => 'Tatar',
        'te' => 'Telugu',
        'th' => 'Thai',
        'bo' => 'Tibetan',
        'tig' => 'Tigre',
        'ti' => 'Tigrinya',
        'ts' => 'Tsonga',
        'tn' => 'Tswana',
        'tr' => 'Turkish',
        'tk' => 'Turkmen',
        'ug' => 'Uighur',
        'uk' => 'Ukrainian',
        'hsb' => 'Upper Sorbian',
        'ur' => 'Urdu',
        'uz' => 'Uzbek',
        've' => 'Venda',
        'vi' => 'Vietnamese',
        'wa' => 'Walloon',
        'cy' => 'Welsh',
        'fy' => 'Western Frisian',
        'wo' => 'Wolof',
        'xh' => 'Xhosa',
        'yi' => 'Yiddish',
        'yo' => 'Yoruba',
        'zu' => 'Zulu',
        'aa_DJ' => 'Afar (Djibouti)',
        'aa_ER' => 'Afar (Eritrea)',
        'aa_ET' => 'Afar (Ethiopia)',
        'af_ZA' => 'Afrikaans (South Africa)',
        'sq_AL' => 'Albanian (Albania)',
        'sq_MK' => 'Albanian (Macedonia)',
        'am_ET' => 'Amharic (Ethiopia)',
        'ar_DZ' => 'Arabic (Algeria)',
        'ar_BH' => 'Arabic (Bahrain)',
        'ar_EG' => 'Arabic (Egypt)',
        'ar_IN' => 'Arabic (India)',
        'ar_IQ' => 'Arabic (Iraq)',
        'ar_JO' => 'Arabic (Jordan)',
        'ar_KW' => 'Arabic (Kuwait)',
        'ar_LB' => 'Arabic (Lebanon)',
        'ar_LY' => 'Arabic (Libya)',
        'ar_MA' => 'Arabic (Morocco)',
        'ar_OM' => 'Arabic (Oman)',
        'ar_QA' => 'Arabic (Qatar)',
        'ar_SA' => 'Arabic (Saudi Arabia)',
        'ar_SD' => 'Arabic (Sudan)',
        'ar_SY' => 'Arabic (Syria)',
        'ar_TN' => 'Arabic (Tunisia)',
        'ar_AE' => 'Arabic (United Arab Emirates)',
        'ar_YE' => 'Arabic (Yemen)',
        'an_ES' => 'Aragonese (Spain)',
        'hy_AM' => 'Armenian (Armenia)',
        'as_IN' => 'Assamese (India)',
        'ast_ES' => 'Asturian (Spain)',
        'az_AZ' => 'Azerbaijani (Azerbaijan)',
        'az_TR' => 'Azerbaijani (Turkey)',
        'eu_FR' => 'Basque (France)',
        'eu_ES' => 'Basque (Spain)',
        'be_BY' => 'Belarusian (Belarus)',
        'bem_ZM' => 'Bemba (Zambia)',
        'bn_BD' => 'Bengali (Bangladesh)',
        'bn_IN' => 'Bengali (India)',
        'ber_DZ' => 'Berber (Algeria)',
        'ber_MA' => 'Berber (Morocco)',
        'byn_ER' => 'Blin (Eritrea)',
        'bs_BA' => 'Bosnian (Bosnia and Herzegovina)',
        'br_FR' => 'Breton (France)',
        'bg_BG' => 'Bulgarian (Bulgaria)',
        'my_MM' => 'Burmese (Myanmar [Burma])',
        'ca_AD' => 'Catalan (Andorra)',
        'ca_FR' => 'Catalan (France)',
        'ca_IT' => 'Catalan (Italy)',
        'ca_ES' => 'Catalan (Spain)',
        'zh_CN' => 'Chinese (China)',
        'zh_HK' => 'Chinese (Hong Kong SAR China)',
        'zh_SG' => 'Chinese (Singapore)',
        'zh_TW' => 'Chinese (Taiwan)',
        'cv_RU' => 'Chuvash (Russia)',
        'kw_GB' => 'Cornish (United Kingdom)',
        'crh_UA' => 'Crimean Turkish (Ukraine)',
        'hr_HR' => 'Croatian (Croatia)',
        'cs_CZ' => 'Czech (Czech Republic)',
        'da_DK' => 'Danish (Denmark)',
        'dv_MV' => 'Divehi (Maldives)',
        'nl_AW' => 'Dutch (Aruba)',
        'nl_BE' => 'Dutch (Belgium)',
        'nl_NL' => 'Dutch (Netherlands)',
        'dz_BT' => 'Dzongkha (Bhutan)',
        'en_AG' => 'English (Antigua and Barbuda)',
        'en_AU' => 'English (Australia)',
        'en_BW' => 'English (Botswana)',
        'en_CA' => 'English (Canada)',
        'en_DK' => 'English (Denmark)',
        'en_HK' => 'English (Hong Kong SAR China)',
        'en_IN' => 'English (India)',
        'en_IE' => 'English (Ireland)',
        'en_NZ' => 'English (New Zealand)',
        'en_NG' => 'English (Nigeria)',
        'en_PH' => 'English (Philippines)',
        'en_SG' => 'English (Singapore)',
        'en_ZA' => 'English (South Africa)',
        'en_GB' => 'English (United Kingdom)',
        'en_US' => 'English (United States)',
        'en_ZM' => 'English (Zambia)',
        'en_ZW' => 'English (Zimbabwe)',
        'eo' => 'Esperanto',
        'et_EE' => 'Estonian (Estonia)',
        'fo_FO' => 'Faroese (Faroe Islands)',
        'fil_PH' => 'Filipino (Philippines)',
        'fi_FI' => 'Finnish (Finland)',
        'fr_BE' => 'French (Belgium)',
        'fr_CA' => 'French (Canada)',
        'fr_FR' => 'French (France)',
        'fr_LU' => 'French (Luxembourg)',
        'fr_CH' => 'French (Switzerland)',
        'fur_IT' => 'Friulian (Italy)',
        'ff_SN' => 'Fulah (Senegal)',
        'gl_ES' => 'Galician (Spain)',
        'lg_UG' => 'Ganda (Uganda)',
        'gez_ER' => 'Geez (Eritrea)',
        'gez_ET' => 'Geez (Ethiopia)',
        'ka_GE' => 'Georgian (Georgia)',
        'de_AT' => 'German (Austria)',
        'de_BE' => 'German (Belgium)',
        'de_DE' => 'German (Germany)',
        'de_LI' => 'German (Liechtenstein)',
        'de_LU' => 'German (Luxembourg)',
        'de_CH' => 'German (Switzerland)',
        'el_CY' => 'Greek (Cyprus)',
        'el_GR' => 'Greek (Greece)',
        'gu_IN' => 'Gujarati (India)',
        'ht_HT' => 'Haitian (Haiti)',
        'ha_NG' => 'Hausa (Nigeria)',
        'iw_IL' => 'Hebrew (Israel)',
        'he_IL' => 'Hebrew (Israel)',
        'hi_IN' => 'Hindi (India)',
        'hu_HU' => 'Hungarian (Hungary)',
        'is_IS' => 'Icelandic (Iceland)',
        'ig_NG' => 'Igbo (Nigeria)',
        'id_ID' => 'Indonesian (Indonesia)',
        'ia' => 'Interlingua',
        'iu_CA' => 'Inuktitut (Canada)',
        'ik_CA' => 'Inupiaq (Canada)',
        'ga_IE' => 'Irish (Ireland)',
        'it_IT' => 'Italian (Italy)',
        'it_CH' => 'Italian (Switzerland)',
        'ja_JP' => 'Japanese (Japan)',
        'kl_GL' => 'Kalaallisut (Greenland)',
        'kn_IN' => 'Kannada (India)',
        'ks_IN' => 'Kashmiri (India)',
        'csb_PL' => 'Kashubian (Poland)',
        'kk_KZ' => 'Kazakh (Kazakhstan)',
        'km_KH' => 'Khmer (Cambodia)',
        'rw_RW' => 'Kinyarwanda (Rwanda)',
        'ky_KG' => 'Kirghiz (Kyrgyzstan)',
        'kok_IN' => 'Konkani (India)',
        'ko_KR' => 'Korean (South Korea)',
        'ku_TR' => 'Kurdish (Turkey)',
        'lo_LA' => 'Lao (Laos)',
        'lv_LV' => 'Latvian (Latvia)',
        'li_BE' => 'Limburgish (Belgium)',
        'li_NL' => 'Limburgish (Netherlands)',
        'lt_LT' => 'Lithuanian (Lithuania)',
        'nds_DE' => 'Low German (Germany)',
        'nds_NL' => 'Low German (Netherlands)',
        'mk_MK' => 'Macedonian (Macedonia)',
        'mai_IN' => 'Maithili (India)',
        'mg_MG' => 'Malagasy (Madagascar)',
        'ms_MY' => 'Malay (Malaysia)',
        'ml_IN' => 'Malayalam (India)',
        'mt_MT' => 'Maltese (Malta)',
        'gv_GB' => 'Manx (United Kingdom)',
        'mi_NZ' => 'Maori (New Zealand)',
        'mr_IN' => 'Marathi (India)',
        'mn_MN' => 'Mongolian (Mongolia)',
        'ne_NP' => 'Nepali (Nepal)',
        'se_NO' => 'Northern Sami (Norway)',
        'nso_ZA' => 'Northern Sotho (South Africa)',
        'nb_NO' => 'Norwegian Bokmål (Norway)',
        'nn_NO' => 'Norwegian Nynorsk (Norway)',
        'oc_FR' => 'Occitan (France)',
        'or_IN' => 'Oriya (India)',
        'om_ET' => 'Oromo (Ethiopia)',
        'om_KE' => 'Oromo (Kenya)',
        'os_RU' => 'Ossetic (Russia)',
        'pap_AN' => 'Papiamento (Netherlands Antilles)',
        'ps_AF' => 'Pashto (Afghanistan)',
        'fa_IR' => 'Persian (Iran)',
        'pl_PL' => 'Polish (Poland)',
        'pt_BR' => 'Portuguese (Brazil)',
        'pt_PT' => 'Portuguese (Portugal)',
        'pa_IN' => 'Punjabi (India)',
        'pa_PK' => 'Punjabi (Pakistan)',
        'ro_RO' => 'Romanian (Romania)',
        'ru_RU' => 'Russian (Russia)',
        'ru_UA' => 'Russian (Ukraine)',
        'sa_IN' => 'Sanskrit (India)',
        'sc_IT' => 'Sardinian (Italy)',
        'gd_GB' => 'Scottish Gaelic (United Kingdom)',
        'sr_ME' => 'Serbian (Montenegro)',
        'sr_RS' => 'Serbian (Serbia)',
        'sid_ET' => 'Sidamo (Ethiopia)',
        'sd_IN' => 'Sindhi (India)',
        'si_LK' => 'Sinhala (Sri Lanka)',
        'sk_SK' => 'Slovak (Slovakia)',
        'sl_SI' => 'Slovenian (Slovenia)',
        'so_DJ' => 'Somali (Djibouti)',
        'so_ET' => 'Somali (Ethiopia)',
        'so_KE' => 'Somali (Kenya)',
        'so_SO' => 'Somali (Somalia)',
        'nr_ZA' => 'South Ndebele (South Africa)',
        'st_ZA' => 'Southern Sotho (South Africa)',
        'es_AR' => 'Spanish (Argentina)',
        'es_BO' => 'Spanish (Bolivia)',
        'es_CL' => 'Spanish (Chile)',
        'es_CO' => 'Spanish (Colombia)',
        'es_CR' => 'Spanish (Costa Rica)',
        'es_DO' => 'Spanish (Dominican Republic)',
        'es_EC' => 'Spanish (Ecuador)',
        'es_SV' => 'Spanish (El Salvador)',
        'es_GT' => 'Spanish (Guatemala)',
        'es_HN' => 'Spanish (Honduras)',
        'es_MX' => 'Spanish (Mexico)',
        'es_NI' => 'Spanish (Nicaragua)',
        'es_PA' => 'Spanish (Panama)',
        'es_PY' => 'Spanish (Paraguay)',
        'es_PE' => 'Spanish (Peru)',
        'es_ES' => 'Spanish (Spain)',
        'es_US' => 'Spanish (United States)',
        'es_UY' => 'Spanish (Uruguay)',
        'es_VE' => 'Spanish (Venezuela)',
        'sw_KE' => 'Swahili (Kenya)',
        'sw_TZ' => 'Swahili (Tanzania)',
        'ss_ZA' => 'Swati (South Africa)',
        'sv_FI' => 'Swedish (Finland)',
        'sv_SE' => 'Swedish (Sweden)',
        'tl_PH' => 'Tagalog (Philippines)',
        'tg_TJ' => 'Tajik (Tajikistan)',
        'ta_IN' => 'Tamil (India)',
        'tt_RU' => 'Tatar (Russia)',
        'te_IN' => 'Telugu (India)',
        'th_TH' => 'Thai (Thailand)',
        'bo_CN' => 'Tibetan (China)',
        'bo_IN' => 'Tibetan (India)',
        'tig_ER' => 'Tigre (Eritrea)',
        'ti_ER' => 'Tigrinya (Eritrea)',
        'ti_ET' => 'Tigrinya (Ethiopia)',
        'ts_ZA' => 'Tsonga (South Africa)',
        'tn_ZA' => 'Tswana (South Africa)',
        'tr_CY' => 'Turkish (Cyprus)',
        'tr_TR' => 'Turkish (Turkey)',
        'tk_TM' => 'Turkmen (Turkmenistan)',
        'ug_CN' => 'Uighur (China)',
        'uk_UA' => 'Ukrainian (Ukraine)',
        'hsb_DE' => 'Upper Sorbian (Germany)',
        'ur_PK' => 'Urdu (Pakistan)',
        'uz_UZ' => 'Uzbek (Uzbekistan)',
        've_ZA' => 'Venda (South Africa)',
        'vi_VN' => 'Vietnamese (Vietnam)',
        'wa_BE' => 'Walloon (Belgium)',
        'cy_GB' => 'Welsh (United Kingdom)',
        'fy_DE' => 'Western Frisian (Germany)',
        'fy_NL' => 'Western Frisian (Netherlands)',
        'wo_SN' => 'Wolof (Senegal)',
        'xh_ZA' => 'Xhosa (South Africa)',
        'yi_US' => 'Yiddish (United States)',
        'yo_NG' => 'Yoruba (Nigeria)',
        'zu_ZA' => 'Zulu (South Africa)'
    );
}
